# Create a new directory and enter it
function md() {
  mkdir -p "$@" && cd "$@" || { echo "Failed to create or change directory"; exit 1; }
}

function tree() {
  level=${1:-2}
  exa -a --long --tree --level="$level"
}

# Find files recursively and pipe to command
function ff() {
  if [ -z "$1" ]; then
    echo "Please specify a search path"
    return 1
  fi

  local files
  files=$(find "$1" -type f)

  if [ "$2" ]; then
    $2 "$files"
  else
    echo "$files"
  fi
}

# List octal permissions with stat
function lo() {
  stat -c "%A %a %n" "${1-*}"
}

# Add octal permission to ls
function lso() {
  ls -lahG "$@" | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf(" %0o ",k);print}'
}

# cd into whatever is the forefront Finder window.
function cdf() {
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')" || { echo "Failed to change directory"; exit 1; }
}

# git log with per-commit cmd-clickable GitHub URLs (iTerm)
function gf() {
  local remote
  remote=$(git remote get-url origin)
  [[ "$remote" ]] || return
  local user_repo="${remote//*:}"
  user_repo="${user_repo//.git/}"
  git log "$@" --name-status --no-color | awk -v user_repo="$user_repo" '
    /^commit/ {sha=substr($2,1,7)}
    /^[MA]\t/ {printf "%s\thttps:%s/blob/%s/%s\n", $1, user_repo, sha, $2; next}
    /.*/ {print $0}
  ' | less -F
}

# Copy w/ progress
function cp_p() {
  rsync -WavP --human-readable --progress "$1" "$2"
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
function compression() {
  encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep -i '^Content-Encoding:')"
  echo "$1 is ${encoding:+encoded using ${encoding#*: }}not using any encoding"
}

# Get HTTP headers for a given URL.
function headers() {
  curl -sI "$1"
}

function body() {
  URL="$1"

  HTTP_RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" -X GET "$URL")

  HTTP_BODY=$(echo "$HTTP_RESPONSE" | sed -e 's/HTTPSTATUS\:.*//g')

  HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

  echo "$HTTP_BODY"

  if [ ! "$HTTP_STATUS" -eq 200 ]; then
    echo "Error [HTTP status: $HTTP_STATUS]"
  fi
}

function cask() {
  command=${1:-"install"}
  shift
  brew cask "$command" "$@"
}

# take this repo and copy it to somewhere else minus the .git stuff.
function gitexport() {
  mkdir -p "$1" && git archive master | tar -x -C "$1"
}

function cra() {
  npx create-react-app "$@" --use-npm --template cra-template-pwa
}

function crats() {
  npx create-react-app "$@" --use-npm --template cra-template-pwa-typescript
}

# get gzipped size
function gz() {
  local target=$1
  local origSize
  local gzippedSize

  if [ -d "$target" ]; then
    origSize=$(du -sb "$target" | cut -f1)
    gzippedSize=$(find "$target" -name "*.*" ! -name "*.gz" | xargs gzip -c | wc -c)
  else
    origSize=$(wc -c <"$target")
    gzippedSize=$(gzip -c "$target" | wc -c)
  fi

  echo "Orig size: $(numfmt --to=iec --suffix=B --format="%3f" "$origSize")"
  echo "Gzipped size: $(numfmt --to=iec --suffix=B --format="%3f" "$gzippedSize")"
}

# All the dig info
function digga() {
  dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
  printf '\\x%s' "$(printf "%s" "$@" | xxd -p -c1 -u)"
  echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
  perl -C -e "print \"$*\""
  echo # newline
}

# Extract archives - use: extract <file>
function extract() {
  if [ ! -f "$1" ]; then
    echo "'$1' is not a valid file"
    return 1
  fi

  local filename
  filename=$(basename -- "$1")
  local foldername="${filename%%.*}"
  local fullpath=$(realpath -- "$1")

  if [ -d "$foldername" ]; then
    printf "%s already exists. Overwrite? (y/n) " "$foldername"
    read -r answer
    if [[ "$answer" != [Yy] ]]; then
      return
    fi
    rm -rf -- "$foldername"
  fi

  mkdir -- "$foldername" && cd -- "$foldername" || exit

  case $1 in
    *.tar.bz2) tar xjf "$fullpath" ;;
    *.tar.gz) tar xzf "$fullpath" ;;
    *.tar.xz) tar Jxvf "$fullpath" ;;
    *.tar.Z) tar xzf "$fullpath" ;;
    *.tar) tar xf "$fullpath" ;;
    *.taz) tar xzf "$fullpath" ;;
    *.tb2) tar xjf "$fullpath" ;;
    *.tbz) tar xjf "$fullpath" ;;
    *.tbz2) tar xjf "$fullpath" ;;
    *.tgz) tar xzf "$fullpath" ;;
    *.txz) tar Jxvf "$fullpath" ;;
    *.zip) unzip "$fullpath" ;;
    *) echo "'$1' cannot be extracted via extract()" && cd .. && rm -r "$foldername" ;;
  esac
}
